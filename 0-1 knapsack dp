#include <stdio.h>
#include <stdlib.h>

#define MAX_ITEMS 100

int max(int a, int b) {
    return a > b ? a : b;
}

int knapsack(int m, int n, int profit[], int wt[], int V[MAX_ITEMS + 1][MAX_ITEMS + 1]) {
    int i, j;
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= m; j++) {
            if (i == 0 || j == 0) {
                V[i][j] = 0;
            } else if (j < wt[i - 1]) {
                V[i][j] = V[i - 1][j];
            } else {
                V[i][j] = max(V[i - 1][j], profit[i - 1] + V[i - 1][j - wt[i - 1]]);
            }
        }
    }
    return V[n][m];
}

int composition(int n, int m, int V[MAX_ITEMS + 1][MAX_ITEMS + 1], int wt[], int items[]) {
    int j = m;
    int count = 0;
    for (int i = n; i > 0; i--) {
        if (V[i][j] > V[i - 1][j]) {
            items[count] = i;
            count++;
            j -= wt[i - 1];
        }
    }
    return count;
}

void printComposition(int items[], int count) {
    printf("Items included in the knapsack:\n");
    for (int i = 0; i < count; i++) {
        printf("%d ", items[i]);
    }
    printf("\n");
}

void print(int m, int n, int V[MAX_ITEMS + 1][MAX_ITEMS + 1]) {
    printf("0/1 knapsack problem using (bottom up) dynamic programming approach:\n");
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= m; j++) {
            printf("%d ", V[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int m, n;
    printf("Enter the capacity of knapsack:\n");
    scanf("%d", &m);
    
    printf("Enter the number of items:\n");
    scanf("%d", &n);
    
    int profit[n];
    int wt[n];
    
    printf("Enter the weight and values (profit) of items:\n");
    for (int i = 0; i < n; i++) {
        printf("Weight and Values of item %d:\n", i + 1);
        scanf("%d %d", &wt[i], &profit[i]);
    }
    
    int V[MAX_ITEMS + 1][MAX_ITEMS + 1];
    
    int maxProfit = knapsack(m, n, profit, wt, V);
    printf("Maximum profit: %d\n", maxProfit);
    
    print(m, n, V);
    
    int items[MAX_ITEMS];
    int count = composition(n, m, V, wt, items);
    printComposition(items, count);
    
    return 0;
}

/*

/tmp/rzBim3cLvv.o
Enter the capacity of knapsack:
6
Enter the number of items:
5
Enter the weight and values (profit) of items:
Weight and Values of item 1:
3 25
Weight and Values of item 2:
2 20
Weight and Values of item 3:
1 15
Weight and Values of item 4:
4 40
Weight and Values of item 5:
5 50
Maximum profit: 65
0/1 knapsack problem using (bottom up) dynamic programming approach:
0 0 0 0 0 0 0 
0 0 0 25 25 25 25 
0 0 20 25 25 45 45 
0 15 20 35 40 45 60 
0 15 20 35 40 55 60 
0 15 20 35 40 55 65 
Items included in the knapsack:
5 3 


=== Code Execution Successful ===

=== Code Execution Successful ===

*/
