#include <stdio.h>
#define V 100
#define INF 999

int minKey(int key[], int mstSet[], int n) {
    int min = INF, min_index;
    for (int v = 0; v < n; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

void printMST(int parent[], int graph[V][V], int n) {
    printf("\nMST Edges and their Weights:\n");
    printf("Edge\t\tWeight\n");
    for (int i = 1; i < n; i++) {
        printf("From %d - To %d \t%d\n", parent[i], i, graph[i][parent[i]]);
    }
}

void primMST(int graph[V][V], int n) {
    int parent[V];  // Array to store the constructed MST
    int key[V];     // Key values to pick minimum weight edge
    int mstSet[V];  // To represent set of vertices included in MST

    // Initialize all keys as INF and mstSet[] as false
    for (int i = 0; i < n; i++) {
        key[i] = INF;
        mstSet[i] = 0;
    }

    // Always include the first vertex in MST
    key[0] = 0;
    parent[0] = -1; // First node is always the root of MST

    for (int count = 0; count < n - 1; count++) {
        // Pick the minimum key vertex from the set of vertices not yet included in MST
        int u = minKey(key, mstSet, n);
        mstSet[u] = 1;

        // Update the key value of the adjacent vertices of the picked vertex
        for (int v = 0; v < n; v++) {
            // Update key[v] if and only if graph[u][v] is smaller than key[v]
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    printMST(parent, graph, n);
}

int main() {
    int n;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    int graph[V][V];
    printf("Enter the weight matrix (%d x %d):\n", n, n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    primMST(graph, n);
    return 0;
}
